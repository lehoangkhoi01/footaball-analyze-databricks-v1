# Databricks notebook source
# MAGIC %md
# MAGIC ### Example Exploratory Notebook
# MAGIC
# MAGIC Use this notebook to explore the data generated by the pipeline in your preferred programming language.
# MAGIC
# MAGIC **Note**: This notebook is not executed as part of the pipeline.

# COMMAND ----------

# DBTITLE 1,SET CATALOG AND SCHEMA
# MAGIC %sql
# MAGIC USE CATALOG `football-analyze-v1`;
# MAGIC USE SCHEMA `football`;
# MAGIC SELECT current_catalog(), current_schema()

# COMMAND ----------

# DBTITLE 1,Test fetch data from API and write json
from src.api.api_handler import APIError, APIRequestHandler
import json
# from api.endpoint_const.api_football_endpoints import LEAGUES_ENDPOINT
LEAGUES_ENDPOINT = "/leagues"
rootUrl = dbutils.secrets.get(scope="football-analyze", key="api-url")
api_key = dbutils.secrets.get(scope="football-analyze", key="api-key")
# Define headers
headers = {
    'x-rapidapi-host': 'v3.football.api-sports.io',
    'x-rapidapi-key': api_key
}
with APIRequestHandler(base_url=rootUrl) as api:
    api.set_headers(headers)
    try:
        # GET request
        response = api.get(LEAGUES_ENDPOINT)
        resultCount = response.__getitem__('results')
        if not resultCount:
            print('Empty data from fetching Leagues endpoint')
        else:
            print("There's result")
            # Save the JSON data to Bronze layer
            data = response.__getitem__('response')
            dbutils.fs.put(
                f"/Volumes/football-analyze-v1/football/raw-files/leagues/leagues.json",
                json.dumps(data, indent=2),
                True
            )
            print(f"Data written to success")
    except APIError as e:
        print(f"API Error: {e}")
        print(f"Status Code: {e.status_code}")
    except Exception as e:
        print(f"Unexpected error: {e}")

# COMMAND ----------

# DBTITLE 1,Test read data from json
import json

# Sample data
data = {
    "league": "Premier League",
    "country": "Spain",
    "season": 2023,
    "teams": "Man City"
}

dbutils.fs.put(
                f"/Volumes/football-analyze-v1/football/api-raw-data/samples/leagues.json",
                json.dumps(data, indent=2),
                True
            )


# COMMAND ----------

# List the contents of the specified directory
try:
    files = dbutils.fs.ls('s3://football-analyze/samples')
    for file in files:
        print(file.path)
except Exception as e:
    print(f"Error accessing the directory: {e}")

# COMMAND ----------

# DBTITLE 1,Create bronze streaming table
# MAGIC %sql
# MAGIC CREATE OR REFRESH STREAMING TABLE bronze_table
# MAGIC (
# MAGIC   league STRING,
# MAGIC   country STRING,
# MAGIC   season INTEGER,
# MAGIC   teams STRING,
# MAGIC   processing_time TIMESTAMP,
# MAGIC   source_file STRING
# MAGIC )
# MAGIC AS SELECT
# MAGIC   league,
# MAGIC   country,
# MAGIC   season,
# MAGIC   teams,
# MAGIC   current_timestamp() as processing_time,
# MAGIC   _metadata.file_name as source_file
# MAGIC FROM STREAM read_files(
# MAGIC   "s3://football-analyze/samples",
# MAGIC   format => 'JSON',
# MAGIC   schema => 'league STRING, country STRING, season INTEGER, teams STRING',
# MAGIC   mergeSchema => false,
# MAGIC   schemaLocation => 's3://football-analyze/bronze_leagues'
# MAGIC );
